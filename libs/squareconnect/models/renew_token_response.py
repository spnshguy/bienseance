# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class RenewTokenResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_token=None, token_type=None, expires_at=None, merchant_id=None, subscription_id=None, plan_id=None):
        """
        RenewTokenResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_token': 'str',
            'token_type': 'str',
            'expires_at': 'str',
            'merchant_id': 'str',
            'subscription_id': 'str',
            'plan_id': 'str'
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'token_type': 'token_type',
            'expires_at': 'expires_at',
            'merchant_id': 'merchant_id',
            'subscription_id': 'subscription_id',
            'plan_id': 'plan_id'
        }

        self._access_token = access_token
        self._token_type = token_type
        self._expires_at = expires_at
        self._merchant_id = merchant_id
        self._subscription_id = subscription_id
        self._plan_id = plan_id

    @property
    def access_token(self):
        """
        Gets the access_token of this RenewTokenResponse.
        The renewed access token. This value might be different from the `access_token` you provided in your request. You provide this token in a header with every request to Connect API endpoints. See [Request and response headers](https://docs.connect.squareup.com/api/connect/v2/#requestandresponseheaders) for the format of this header.

        :return: The access_token of this RenewTokenResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this RenewTokenResponse.
        The renewed access token. This value might be different from the `access_token` you provided in your request. You provide this token in a header with every request to Connect API endpoints. See [Request and response headers](https://docs.connect.squareup.com/api/connect/v2/#requestandresponseheaders) for the format of this header.

        :param access_token: The access_token of this RenewTokenResponse.
        :type: str
        """

        self._access_token = access_token

    @property
    def token_type(self):
        """
        Gets the token_type of this RenewTokenResponse.
        This value is always _bearer_.

        :return: The token_type of this RenewTokenResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """
        Sets the token_type of this RenewTokenResponse.
        This value is always _bearer_.

        :param token_type: The token_type of this RenewTokenResponse.
        :type: str
        """

        self._token_type = token_type

    @property
    def expires_at(self):
        """
        Gets the expires_at of this RenewTokenResponse.
        The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.

        :return: The expires_at of this RenewTokenResponse.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this RenewTokenResponse.
        The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.

        :param expires_at: The expires_at of this RenewTokenResponse.
        :type: str
        """

        self._expires_at = expires_at

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this RenewTokenResponse.
        The ID of the authorizing merchant's business.

        :return: The merchant_id of this RenewTokenResponse.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this RenewTokenResponse.
        The ID of the authorizing merchant's business.

        :param merchant_id: The merchant_id of this RenewTokenResponse.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this RenewTokenResponse.
        The ID of the merchant [subscription](https://docs.connect.squareup.com/api/connect/v1/#navsection-subscriptionmanagement) associated with the authorization. Only present if the merchant signed up for a subscription during authorization.

        :return: The subscription_id of this RenewTokenResponse.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this RenewTokenResponse.
        The ID of the merchant [subscription](https://docs.connect.squareup.com/api/connect/v1/#navsection-subscriptionmanagement) associated with the authorization. Only present if the merchant signed up for a subscription during authorization.

        :param subscription_id: The subscription_id of this RenewTokenResponse.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def plan_id(self):
        """
        Gets the plan_id of this RenewTokenResponse.
        The ID of the [subscription](https://docs.connect.squareup.com/api/connect/v1/#navsection-subscriptionmanagement) plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.

        :return: The plan_id of this RenewTokenResponse.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """
        Sets the plan_id of this RenewTokenResponse.
        The ID of the [subscription](https://docs.connect.squareup.com/api/connect/v1/#navsection-subscriptionmanagement) plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.

        :param plan_id: The plan_id of this RenewTokenResponse.
        :type: str
        """

        self._plan_id = plan_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
