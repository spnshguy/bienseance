# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class CustomerFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, creation_source=None, created_at=None, updated_at=None):
        """
        CustomerFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'creation_source': 'CustomerCreationSourceFilter',
            'created_at': 'TimeRange',
            'updated_at': 'TimeRange'
        }

        self.attribute_map = {
            'creation_source': 'creation_source',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._creation_source = creation_source
        self._created_at = created_at
        self._updated_at = updated_at

    @property
    def creation_source(self):
        """
        Gets the creation_source of this CustomerFilter.
        A filter to select customers based on their creation source.

        :return: The creation_source of this CustomerFilter.
        :rtype: CustomerCreationSourceFilter
        """
        return self._creation_source

    @creation_source.setter
    def creation_source(self, creation_source):
        """
        Sets the creation_source of this CustomerFilter.
        A filter to select customers based on their creation source.

        :param creation_source: The creation_source of this CustomerFilter.
        :type: CustomerCreationSourceFilter
        """

        self._creation_source = creation_source

    @property
    def created_at(self):
        """
        Gets the created_at of this CustomerFilter.
        A filter to select customers based on when they were created.

        :return: The created_at of this CustomerFilter.
        :rtype: TimeRange
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CustomerFilter.
        A filter to select customers based on when they were created.

        :param created_at: The created_at of this CustomerFilter.
        :type: TimeRange
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this CustomerFilter.
        A filter to select customers based on when they were updated.

        :return: The updated_at of this CustomerFilter.
        :rtype: TimeRange
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this CustomerFilter.
        A filter to select customers based on when they were updated.

        :param updated_at: The updated_at of this CustomerFilter.
        :type: TimeRange
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
